// Generator and Datasource
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  CLIENT
  ADMIN
  PARTNER
  STAFF
}

// Models
model User {
  id                String           @id @default(cuid())
  name              String?
  email             String           @unique
  emailVerified     DateTime?
  image             String?
  role              Role             @default(CLIENT)
  staff             Staff?
  accounts          Account[]
  sessions          Session[]
  authenticators    Authenticator[]
  verificationCodes VerificationCode[]
  appointments      Appointment[]
  sales            Sale[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationCode {
  id        String   @id @default(cuid())
  userId    String
  code      String
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@id([identifier, token])
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@unique([userId, credentialID])
}


// In the Account model, renamed the following fields from snake_case to camelCase:
//   – refresh_token → refreshToken
//   – access_token → accessToken
//   – expires_at → expiresAt
//   – token_type → tokenType
//   – id_token → idToken
//   – session_state → sessionState

